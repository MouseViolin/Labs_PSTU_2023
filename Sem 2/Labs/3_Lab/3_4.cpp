#include <iostream>

using namespace std;

bool oneIteration = 1;
int board[8][8]; // Выделение памяти под массив, который будет представлять собой шахматную доску
 
// Вывод доски.
void showBoard()
{
    for(int a = 0; a < 8; ++a){
        for(int b = 0; b < 8; ++b) cout << ((board[a][b]) ? "Q " : ". ");
        cout << endl;
    }
}
 
// Функция проверяет нет ли уже установленных ферзей по вертикали и диагоналям.
// Каждая проверка идет до поступаемой строки, тк заполнение доски происходит сврху вниз и нам не интересно, что находиться снизу
bool tryQueen(int a, int b)
{
//    Проверка происходит, благодаря фиксации столбца и перебору строк
    for(int i = 0; i < a; ++i)
    {
        if(board[i][b])
        {
            return false;
        }
    }
//    Проверка левой верхней диагонали
    for(int i = 1; i <= a && b-i >= 0; ++i)
    {
        if(board[a-i][b-i])
        {
            return false;
        }
    }
//    Проверка правой верхней диагонали
    for(int i = 1; i <= a && b+i < 8; i++)
    {
        if(board[a-i][b+i])
        {
            return false;
        }
    }
    
    return true;
}
 
// Функция пробует найти результаты решений, проверяя строку (а), в которую можно поставить ферзя
void setQueen(int a)
{
//    При проходе всех строк выводим результат, тк расчет доски происходит рекурсивно,
//    чтобы вывести только первый вариант используем флаг.
    if(a == 8 && oneIteration)
    {
        showBoard();
        oneIteration = 0;
    }
    
    for(int i = 0; i < 8; ++i)
    {
//          Проверяем возможность поставить в board ферзя (единицу),
//          Будет ли единственным в этой строке, столбце и диагоналях.
        if(tryQueen(a, i))
        {
            board[a][i] = 1;
            setQueen(a+1);
            board[a][i] = 0;
        }
        
        
    }
}
int main()
{
//    Ручная постановка ферзя в board[i][j] и запуск алгоритма с 0-й строки - setQueen(0)
    int i, j;
    std::cin >> i >> j;
    board[i][j] = 1;
    setQueen(0);
    
    return 0;
}
